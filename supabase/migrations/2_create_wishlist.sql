/*
# Create Wishlist Functionality
This migration adds the necessary table and policies to support a user wishlist feature.

## Query Description:
This operation creates a new `wishlists` table to store which books users have added to their wishlist. It establishes foreign key relationships to the `users` and `books` tables and enables Row Level Security to ensure users can only access their own wishlist items. This is a non-destructive operation and should not impact existing data.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true (the table can be dropped)

## Structure Details:
- Table Created: `public.wishlists`
- Columns: `id`, `user_id`, `book_id`, `created_at`
- Foreign Keys:
  - `wishlists.user_id` -> `auth.users.id`
  - `wishlists.book_id` -> `public.books.id`
- Indexes: `wishlists_user_id_book_id_key` (unique)

## Security Implications:
- RLS Status: Enabled
- Policy Changes: Yes (New policies for `wishlists` table)
- Auth Requirements: Users must be authenticated to manage their wishlist.
*/

-- 1. Create the wishlists table
CREATE TABLE public.wishlists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    book_id BIGINT NOT NULL REFERENCES public.books(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. Add a unique constraint to prevent duplicate entries
ALTER TABLE public.wishlists
ADD CONSTRAINT wishlists_user_id_book_id_key UNIQUE (user_id, book_id);

-- 3. Add comments to the table and columns
COMMENT ON TABLE public.wishlists IS 'Stores user wishlist items.';
COMMENT ON COLUMN public.wishlists.user_id IS 'The user who added the item to their wishlist.';
COMMENT ON COLUMN public.wishlists.book_id IS 'The book that was wishlisted.';

-- 4. Enable Row Level Security
ALTER TABLE public.wishlists ENABLE ROW LEVEL SECURITY;

-- 5. Create RLS policies
-- Users can view their own wishlist items
CREATE POLICY "Allow users to view their own wishlist"
ON public.wishlists FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Users can insert items into their own wishlist
CREATE POLICY "Allow users to add to their own wishlist"
ON public.wishlists FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Users can delete items from their own wishlist
CREATE POLICY "Allow users to remove from their own wishlist"
ON public.wishlists FOR DELETE
TO authenticated
USING (auth.uid() = user_id);
